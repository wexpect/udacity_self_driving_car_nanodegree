#include <iostream>
#include <vector>
#include "hybrid_breadth_first.h"

using std::cout;
using std::endl;

// Sets up maze grid
int X = 1;  // X means cell is occupied
int _ = 0;  // 0 means cell is free
/**
 * TODO: You can change up the grid maze to test different expansions.
 */
vector<vector<int>> GRID = {
  {_,X,X,_,_,_,_,_,_,_,X,X,_,_,_,_,},
  {_,X,X,_,_,_,_,_,_,X,X,_,_,_,_,_,},
  {_,X,X,_,_,_,_,_,X,X,_,_,_,_,_,_,},
  {_,X,X,_,_,_,_,X,X,_,_,_,X,X,X,_,},
  {_,X,X,_,_,_,X,X,_,_,_,X,X,X,_,_,},
  {_,X,X,_,_,X,X,_,_,_,X,X,X,_,_,_,},
  {_,X,X,_,X,X,_,_,_,X,X,X,_,_,_,_,},
  {_,X,X,X,X,_,_,_,X,X,X,_,_,_,_,_,},
  {_,X,X,X,_,_,_,X,X,X,_,_,_,_,_,_,},
  {_,X,X,_,_,_,X,X,X,_,_,X,X,X,X,X,},
  {_,X,_,_,_,X,X,X,_,_,X,X,X,X,X,X,},
  {_,_,_,_,X,X,X,_,_,X,X,X,X,X,X,X,},
  {_,_,_,X,X,X,_,_,X,X,X,X,X,X,X,X,},
  {_,_,X,X,X,_,_,X,X,X,X,X,X,X,X,X,},
  {_,X,X,X,_,_,_,_,_,_,_,_,_,_,_,_,},
  {X,X,X,_,_,_,_,_,_,_,_,_,_,_,_,_,}
};

// vector<vector<int>> GRID = {
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
// };


// vector<vector<int>> GRID = {
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
//   {_,_,X,_,_,_,_,_,_,_,_,_,_,_,_,_,},  
// };


// NOTE: x, y, theta
vector<double> START = {0.0, 0.0, 0.0};
// NOTE: (row_idx, col_idx) of a cell
vector<int> GOAL = {(int)GRID.size()-1, (int)GRID[0].size()-1};

int main() {
  cout << "Finding path through grid:" << endl;
  
  // Creates an Empty Maze and for testing the number of expansions with it
  for(int i = 0; i < GRID.size(); ++i) {
    cout << GRID[i][0];
    for(int j = 1; j < GRID[0].size(); ++j) {
      cout << "," << GRID[i][j];
    }
    cout << endl;
  }
  cout << "\n" << endl;

  HBF hbf = HBF();

  HBF::maze_path get_path = hbf.search(GRID, START, GOAL);

  vector<HBF::maze_s> show_path = hbf.reconstruct_path(
    get_path.came_from, START, get_path.final
  );

  cout << "\n\nshow path from start to finish" << endl;
  for(int i = show_path.size()-1; i >= 0; --i) {
      HBF::maze_s state = show_path[i];
      cout << "##### step " << state.g << " #####" << endl;
      cout << "x " << state.x << endl;
      cout << "y " << state.y << endl;
      cout << "theta " << state.theta << endl;
  }
  
  return 0;
}


/*
1, BFS

Ruis-MacBook-Pro-15:14_implement_hybrid_a*_in_c++ ruiwang$ ./output/output.out
Finding path through grid:
0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0
0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0
0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0
0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0
0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0
0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0
0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0
0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0
0,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1
0,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1
0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1
0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1
0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1
0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0

found path to goal in 12606 expansions
show path from start to finish
##### step 1 #####
x 1.45
y 0
theta 0
##### step 2 #####
x 2.9
y 0
theta 0
##### step 3 #####
x 4.35
y 0
theta 0
##### step 4 #####
x 5.8
y 0
theta 0
##### step 5 #####
x 7.25
y 0
theta 0
##### step 6 #####
x 8.7
y 0
theta 0.511348
##### step 7 #####
x 9.96452
y 0.709563
theta 1.2884
##### step 8 #####
x 10.3686
y 2.10213
theta 1.54212
##### step 9 #####
x 10.4102
y 3.55153
theta 2.05347
##### step 10 #####
x 9.73714
y 4.83588
theta 2.30718
##### step 11 #####
x 8.7633
y 5.91019
theta 2.30718
##### step 12 #####
x 7.78946
y 6.98449
theta 2.30718
##### step 13 #####
x 6.81562
y 8.0588
theta 2.30718
##### step 14 #####
x 5.84177
y 9.1331
theta 2.30718
##### step 15 #####
x 4.86793
y 10.2074
theta 2.30718
##### step 16 #####
x 3.89409
y 11.2817
theta 2.30718
##### step 17 #####
x 2.92025
y 12.356
theta 1.53013
##### step 18 #####
x 2.97919
y 13.8048
theta 0.177839
##### step 19 #####
x 4.40633
y 14.0613
theta 5.68397
##### step 20 #####
x 5.60371
y 13.2435
theta 5.43025
##### step 21 #####
x 6.55748
y 12.1514
theta 5.43025
##### step 22 #####
x 7.51126
y 11.0592
theta 5.68397
##### step 23 #####
x 8.70864
y 10.2414
theta 5.43025
##### step 24 #####
x 9.66242
y 9.14927
theta 6.78255
##### step 25 #####
x 10.9354
y 9.84363
theta 5.10823
##### step 26 #####
x 11.4945
y 8.50575
theta 5.88528
##### step 27 #####
x 12.8312
y 7.9439
theta 6.66234
##### step 28 #####
x 14.1782
y 8.48059
theta 7.43939
##### step 29 #####
x 14.7623
y 9.80775
theta 7.43939
##### step 30 #####
x 15.3464
y 11.1349
theta 7.43939
##### step 31 #####
x 15.9305
y 12.4621
theta 7.95074
##### step 32 #####
x 15.7904
y 13.9053
theta 7.95074
##### step 33 #####
x 15.6503
y 15.3485
theta 5.92013



2, Hybrid A*
Ruis-MacBook-Pro-15:14_implement_hybrid_a*_in_c++ ruiwang$ g++ -std=c++11 *.cpp -o output/output.out
Ruis-MacBook-Pro-15:14_implement_hybrid_a*_in_c++ ruiwang$ ./output/output.out
Finding path through grid:
0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0
0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0
0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0
0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0
0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0
0,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0
0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0
0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0
0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0
0,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1
0,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1
0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1
0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1
0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1
0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0
1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0


found path to goal in 10313 expansions


show path from start to finish
##### step 1 #####
x 1.45
y 0
theta 0
##### step 2 #####
x 2.9
y 0
theta 0
##### step 3 #####
x 4.35
y 0
theta 0
##### step 4 #####
x 5.8
y 0
theta 0
##### step 5 #####
x 7.25
y 0
theta 0.511348
##### step 6 #####
x 8.51452
y 0.709563
theta 0
##### step 7 #####
x 9.96452
y 0.709563
theta 1.35229
##### step 8 #####
x 10.2788
y 2.12509
theta 1.60601
##### step 9 #####
x 10.2278
y 3.57419
theta 1.35229
##### step 10 #####
x 10.5421
y 4.98971
theta 2.40781
##### step 11 #####
x 9.46527
y 5.96076
theta 2.40781
##### step 12 #####
x 8.38844
y 6.9318
theta 2.40781
##### step 13 #####
x 7.31161
y 7.90285
theta 2.40781
##### step 14 #####
x 6.23477
y 8.87389
theta 2.40781
##### step 15 #####
x 5.15794
y 9.84494
theta 2.40781
##### step 16 #####
x 4.08111
y 10.816
theta 2.40781
##### step 17 #####
x 3.00427
y 11.787
theta 1.63075
##### step 18 #####
x 2.91739
y 13.2344
theta 0.57524
##### step 19 #####
x 4.13403
y 14.0233
theta 0.828957
##### step 20 #####
x 5.11371
y 15.0923
theta 0.051904
##### step 21 #####
x 6.56176
y 15.1675
theta 5.55804
##### step 22 #####
x 7.64694
y 14.2058
theta 5.30432
##### step 23 #####
x 8.45599
y 13.0025
theta 4.79297
##### step 24 #####
x 8.57271
y 11.5572
theta 5.84848
##### step 25 #####
x 9.88785
y 10.9465
theta 5.33714
##### step 26 #####
x 10.7359
y 9.77041
theta 5.59085
##### step 27 #####
x 11.8521
y 8.84483
theta 5.59085
##### step 28 #####
x 12.9683
y 7.91925
theta 6.64637
##### step 29 #####
x 14.3237
y 8.43436
theta 7.15772
##### step 30 #####
x 15.2536
y 9.54686
theta 8.51001
##### step 31 #####
x 14.3692
y 10.6959
theta 7.15772
##### step 32 #####
x 15.2991
y 11.8084
theta 7.66906
##### step 33 #####
x 15.5657
y 13.2337
theta 8.72458
##### step 34 #####
x 14.4569
y 14.168
theta 7.05026
##### step 35 #####
x 15.5008
y 15.1743
theta 5.01966

*/


/*
1, BFS

Ruis-MacBook-Pro-15:14_implement_hybrid_a*_in_c++ ruiwang$ g++ -std=c++11 *.cpp -o output/output.out
Ruis-MacBook-Pro-15:14_implement_hybrid_a*_in_c++ ruiwang$ ./output/output.out
Finding path through grid:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


found path to goal in 23022 expansions


show path from start to finish
##### step 1 #####
x 1.45
y 0
theta 0
##### step 2 #####
x 2.9
y 0
theta 0.511348
##### step 3 #####
x 4.16452
y 0.709563
theta 1.2884
##### step 4 #####
x 4.56858
y 2.10213
theta 0.777053
##### step 5 #####
x 5.6024
y 3.11884
theta 0.777053
##### step 6 #####
x 6.63623
y 4.13555
theta 0.777053
##### step 7 #####
x 7.67005
y 5.15227
theta 0.777053
##### step 8 #####
x 8.70388
y 6.16898
theta 0.777053
##### step 9 #####
x 9.73771
y 7.18569
theta 0.777053
##### step 10 #####
x 10.7715
y 8.2024
theta 0.777053
##### step 11 #####
x 11.8054
y 9.21912
theta 0.777053
##### step 12 #####
x 12.8392
y 10.2358
theta 1.55411
##### step 13 #####
x 12.8634
y 11.6856
theta 1.30039
##### step 14 #####
x 13.2507
y 13.0829
theta 0.78904
##### step 15 #####
x 14.2723
y 14.112
theta 0.78904
##### step 16 #####
x 15.2938
y 15.141
theta 5.04162




2, Hybrid A*

uis-MacBook-Pro-15:14_implement_hybrid_a*_in_c++ ruiwang$ g++ -std=c++11 *.cpp -o output/output.out
Ruis-MacBook-Pro-15:14_implement_hybrid_a*_in_c++ ruiwang$ ./output/output.out
Finding path through grid:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


found path to goal in 1366 expansions


show path from start to finish
##### step 1 #####
x 1.45
y 0
theta 0.253717
##### step 2 #####
x 2.85358
y 0.363956
theta 1.60601
##### step 3 #####
x 2.80253
y 1.81306
theta 1.60601
##### step 4 #####
x 2.75148
y 3.26216
theta 0.550496
##### step 5 #####
x 3.98727
y 4.02067
theta 0.804213
##### step 6 #####
x 4.9931
y 5.06508
theta 1.85973
##### step 7 #####
x 4.57996
y 6.45498
theta 1.60601
##### step 8 #####
x 4.52891
y 7.90408
theta 1.35229
##### step 9 #####
x 4.84323
y 9.3196
theta 2.22045e-16
##### step 10 #####
x 6.29323
y 9.3196
theta 1.35229
##### step 11 #####
x 6.60754
y 10.7351
theta 1.35229
##### step 12 #####
x 6.92186
y 12.1506
theta 2.22045e-16
##### step 13 #####
x 8.37186
y 12.1506
theta 1.35229
##### step 14 #####
x 8.68617
y 13.5662
theta 1.09858
##### step 15 #####
x 9.34573
y 14.8575
theta 0.0430614
##### step 16 #####
x 10.7944
y 14.9199
theta 0.0430614
##### step 17 #####
x 12.243
y 14.9823
theta 6.07253
##### step 18 #####
x 13.661
y 14.6791
theta 6.58388
##### step 19 #####
x 15.0459
y 15.1086
theta 4.90956
*/